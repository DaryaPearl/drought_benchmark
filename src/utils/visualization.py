"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏

–í–∫–ª—é—á–∞–µ—Ç:
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.gridspec import GridSpec
import seaborn as sns
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import xarray as xr
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8' if 'seaborn-v0_8' in plt.style.available else 'default')
sns.set_palette("husl")

class DatasetVisualizer:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    def __init__(self, dataset: xr.Dataset, save_dir: Path):
        self.dataset = dataset
        self.save_dir = Path(save_dir)
        self.save_dir.mkdir(parents=True, exist_ok=True)
    
    def plot_dataset_overview(self):
        """–û–±–∑–æ—Ä–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        
        fig = plt.figure(figsize=(20, 12))
        gs = GridSpec(3, 4, figure=fig, hspace=0.3, wspace=0.3)
        
        # 1. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        ax1 = fig.add_subplot(gs[0, :2])
        self._plot_time_series(ax1)
        
        # 2. –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        ax2 = fig.add_subplot(gs[0, 2:])
        self._plot_spatial_means(ax2)
        
        # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        ax3 = fig.add_subplot(gs[1, :2])
        self._plot_correlation_matrix(ax3)
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        ax4 = fig.add_subplot(gs[1, 2:])
        self._plot_value_distributions(ax4)
        
        # 5. –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        ax5 = fig.add_subplot(gs[2, :2])
        self._plot_data_coverage(ax5)
        
        # 6. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        ax6 = fig.add_subplot(gs[2, 2:])
        self._plot_seasonality(ax6)
        
        plt.suptitle('–û–±–∑–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏', fontsize=16, fontweight='bold')
        plt.savefig(self.save_dir / 'dataset_overview.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –û–±–∑–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.save_dir / 'dataset_overview.png'}")
    
    def _plot_time_series(self, ax):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        variables = ['precipitation', 'temperature', 'spi3', 'ndvi']
        available_vars = [v for v in variables if v in self.dataset.data_vars]
        
        for i, var in enumerate(available_vars[:4]):
            # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
            global_mean = self.dataset[var].mean(dim=['latitude', 'longitude'])
            
            ax.plot(self.dataset.time, global_mean, label=var, linewidth=1.5, alpha=0.8)
        
        ax.set_title('–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ)')
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        ax.xaxis.set_major_locator(mdates.YearLocator(2))
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
    
    def _plot_spatial_means(self, ax):
        """–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SPI3 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        target_var = 'spi3' if 'spi3' in self.dataset.data_vars else list(self.dataset.data_vars)[0]
        
        mean_data = self.dataset[target_var].mean(dim='time')
        
        im = ax.imshow(
            mean_data.values,
            extent=[
                self.dataset.longitude.min(), self.dataset.longitude.max(),
                self.dataset.latitude.min(), self.dataset.latitude.max()
            ],
            aspect='auto',
            origin='lower',
            cmap='RdYlBu_r'
        )
        
        ax.set_title(f'–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {target_var}')
        ax.set_xlabel('–î–æ–ª–≥–æ—Ç–∞')
        ax.set_ylabel('–®–∏—Ä–æ—Ç–∞')
        
        plt.colorbar(im, ax=ax, shrink=0.8)
    
    def _plot_correlation_matrix(self, ax):
        """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        variables = ['precipitation', 'temperature', 'spi3', 'ndvi', 'soil_moisture']
        available_vars = [v for v in variables if v in self.dataset.data_vars]
        
        if len(available_vars) < 2:
            ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n–¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã', 
                   ha='center', va='center', transform=ax.transAxes)
            ax.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
            return
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (—Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
        correlation_data = {}
        for var in available_vars:
            data = self.dataset[var].values.flatten()
            data = data[~np.isnan(data)]
            if len(data) > 10000:
                data = np.random.choice(data, 10000, replace=False)
            correlation_data[var] = data
        
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–µ
        min_len = min(len(v) for v in correlation_data.values())
        for var in correlation_data:
            correlation_data[var] = correlation_data[var][:min_len]
        
        corr_df = pd.DataFrame(correlation_data)
        corr_matrix = corr_df.corr()
        
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        sns.heatmap(corr_matrix, annot=True, cmap='RdBu_r', center=0, 
                   square=True, ax=ax, cbar_kws={'shrink': 0.8})
        ax.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö')
    
    def _plot_value_distributions(self, ax):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        variables = ['precipitation', 'spi3', 'temperature']
        available_vars = [v for v in variables if v in self.dataset.data_vars]
        
        for var in available_vars[:3]:
            data = self.dataset[var].values.flatten()
            data = data[~np.isnan(data)]
            
            # –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            if len(data) > 50000:
                data = np.random.choice(data, 50000, replace=False)
            
            ax.hist(data, bins=50, alpha=0.6, label=var, density=True)
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö')
        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_data_coverage(self, ax):
        """–ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        target_var = list(self.dataset.data_vars)[0]
        
        coverage_by_time = []
        for t in range(len(self.dataset.time)):
            data_slice = self.dataset[target_var].isel(time=t)
            valid_fraction = 1 - np.isnan(data_slice.values).mean()
            coverage_by_time.append(valid_fraction * 100)
        
        ax.plot(self.dataset.time, coverage_by_time, linewidth=2, color='blue')
        ax.fill_between(self.dataset.time, coverage_by_time, alpha=0.3, color='blue')
        
        ax.set_title('–ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        ax.set_ylim(0, 100)
        ax.grid(True, alpha=0.3)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        ax.xaxis.set_major_locator(mdates.YearLocator(2))
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
        plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
    
    def _plot_seasonality(self, ax):
        """–°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SPI3 –∏–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        target_var = 'spi3' if 'spi3' in self.dataset.data_vars else list(self.dataset.data_vars)[0]
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = self.dataset[target_var].groupby('time.month').mean(dim=['latitude', 'longitude', 'time'])
        
        months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                 '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        
        ax.bar(range(1, 13), monthly_data.values, color='skyblue', alpha=0.7)
        ax.set_title(f'–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å {target_var}')
        ax.set_xlabel('–ú–µ—Å—è—Ü')
        ax.set_ylabel(f'–°—Ä–µ–¥–Ω–µ–µ {target_var}')
        ax.set_xticks(range(1, 13))
        ax.set_xticklabels(months, rotation=45)
        ax.grid(True, alpha=0.3)

class TrainingVisualizer:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, save_dir: Path):
        self.save_dir = Path(save_dir)
        self.save_dir.mkdir(parents=True, exist_ok=True)
    
    def plot_training_curves(self, log_dir: Path):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤ TensorBoard"""
        print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –æ–±—É—á–µ–Ω–∏—è...")
        
        try:
            from tensorboard.backend.event_processing.event_accumulator import EventAccumulator
            
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            log_files = list(log_dir.rglob('events.out.tfevents.*'))
            
            if not log_files:
                print("‚ö† –õ–æ–≥–∏ TensorBoard –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            fig, axes = plt.subplots(2, 2, figsize=(15, 10))
            axes = axes.flatten()
            
            colors = ['blue', 'red', 'green', 'orange']
            
            for i, log_file in enumerate(log_files[:4]):
                model_name = log_file.parent.name
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
                ea = EventAccumulator(str(log_file.parent))
                ea.Reload()
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                train_loss = ea.Scalars('train_loss_epoch') if 'train_loss_epoch' in ea.Tags()['scalars'] else []
                val_loss = ea.Scalars('val_loss') if 'val_loss' in ea.Tags()['scalars'] else []
                
                ax = axes[i] if i < len(axes) else axes[-1]
                
                if train_loss:
                    steps_train, values_train = zip(*[(s.step, s.value) for s in train_loss])
                    ax.plot(steps_train, values_train, label='Train Loss', color=colors[i % len(colors)], alpha=0.7)
                
                if val_loss:
                    steps_val, values_val = zip(*[(s.step, s.value) for s in val_loss])
                    ax.plot(steps_val, values_val, label='Val Loss', color=colors[i % len(colors)], linestyle='--')
                
                ax.set_title(f'{model_name} - Training Curves')
                ax.set_xlabel('Epoch')
                ax.set_ylabel('Loss')
                ax.legend()
                ax.grid(True, alpha=0.3)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö subplot'–æ–≤
            for i in range(len(log_files), len(axes)):
                fig.delaxes(axes[i])
            
            plt.tight_layout()
            plt.savefig(self.save_dir / 'training_curves.png', dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"‚úÖ –ö—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.save_dir / 'training_curves.png'}")
            
        except ImportError:
            print("‚ö† tensorboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—Ä–∏–≤—ã–µ –æ–±—É—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–≤—ã—Ö –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def plot_loss_comparison(self, results: Dict[str, Dict]):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å –º–æ–¥–µ–ª–µ–π"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å...")
        
        model_names = []
        train_losses = []
        val_losses = []
        
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    # –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –±–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    best_model = min(model_results.items(), 
                                   key=lambda x: x[1].get('val_metrics', {}).get('mae', float('inf')))
                    model_names.append(f"{best_model[0]} (best)")
                    train_losses.append(best_model[1].get('train_metrics', {}).get('mae', 0))
                    val_losses.append(best_model[1].get('val_metrics', {}).get('mae', 0))
                else:
                    model_names.append(model_name)
                    train_losses.append(model_results.get('train_metrics', {}).get('final_train_loss', 0))
                    val_losses.append(model_results.get('val_metrics', {}).get('final_val_loss', 0))
        
        if not model_names:
            print("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å")
            return
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å
        x = np.arange(len(model_names))
        width = 0.35
        
        ax1.bar(x - width/2, train_losses, width, label='Train Loss', alpha=0.8)
        ax1.bar(x + width/2, val_losses, width, label='Val Loss', alpha=0.8)
        
        ax1.set_xlabel('–ú–æ–¥–µ–ª–∏')
        ax1.set_ylabel('Loss')
        ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—å –º–æ–¥–µ–ª–µ–π')
        ax1.set_xticks(x)
        ax1.set_xticklabels(model_names, rotation=45, ha='right')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        training_times = []
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    avg_time = np.mean([r.get('training_time', 0) for r in model_results.values() 
                                      if isinstance(r, dict)])
                    training_times.append(avg_time)
                else:
                    training_times.append(model_results.get('training_time', 0))
        
        if training_times:
            bars = ax2.bar(model_names, training_times, alpha=0.8, color='orange')
            ax2.set_xlabel('–ú–æ–¥–µ–ª–∏')
            ax2.set_ylabel('–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (—Å)')
            ax2.set_title('–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π')
            ax2.set_xticklabels(model_names, rotation=45, ha='right')
            ax2.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, time_val in zip(bars, training_times):
                height = bar.get_height()
                ax2.text(bar.get_x() + bar.get_width()/2., height,
                        f'{time_val:.1f}s', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig(self.save_dir / 'model_comparison.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.save_dir / 'model_comparison.png'}")

class ResultsVisualizer:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    def __init__(self, save_dir: Path):
        self.save_dir = Path(save_dir)
        self.save_dir.mkdir(parents=True, exist_ok=True)
    
    def plot_model_comparison(self, results: Dict[str, Dict]):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
        
        fig = plt.figure(figsize=(20, 12))
        gs = GridSpec(2, 3, figure=fig, hspace=0.3, wspace=0.3)
        
        # 1. –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        ax1 = fig.add_subplot(gs[0, 0])
        self._plot_metrics_comparison(ax1, results)
        
        # 2. –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        ax2 = fig.add_subplot(gs[0, 1])
        self._plot_training_time(ax2, results)
        
        # 3. Radar chart –º–µ—Ç—Ä–∏–∫
        ax3 = fig.add_subplot(gs[0, 2], projection='polar')
        self._plot_metrics_radar(ax3, results)
        
        # 4. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π
        ax4 = fig.add_subplot(gs[1, :2])
        self._plot_classical_detailed(ax4, results)
        
        # 5. –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        ax5 = fig.add_subplot(gs[1, 2])
        self._plot_summary_table(ax5, results)
        
        plt.suptitle('–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏', 
                    fontsize=16, fontweight='bold')
        plt.savefig(self.save_dir / 'comprehensive_comparison.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.save_dir / 'comprehensive_comparison.png'}")
    
    def _plot_metrics_comparison(self, ax, results):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        models = []
        mae_scores = []
        rmse_scores = []
        
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å
                    best_classical = min(model_results.items(), 
                                        key=lambda x: x[1].get('val_metrics', {}).get('mae', float('inf')))
                    models.append(f"{best_classical[0]} (best)")
                    mae_scores.append(best_classical[1].get('val_metrics', {}).get('mae', 0))
                    rmse_scores.append(best_classical[1].get('val_metrics', {}).get('rmse', 0))
                else:
                    models.append(model_name)
                    # –î–ª—è SOTA –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º loss –∫–∞–∫ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é MAE
                    val_loss = model_results.get('val_metrics', {}).get('final_val_loss', 0)
                    mae_scores.append(val_loss)
                    rmse_scores.append(val_loss * 1.2)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        x = np.arange(len(models))
        width = 0.35
        
        ax.bar(x - width/2, mae_scores, width, label='MAE', alpha=0.8)
        ax.bar(x + width/2, rmse_scores, width, label='RMSE', alpha=0.8)
        
        ax.set_xlabel('–ú–æ–¥–µ–ª–∏')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞')
        ax.set_xticks(x)
        ax.set_xticklabels(models, rotation=45, ha='right')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_training_time(self, ax, results):
        """–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è"""
        models = []
        times = []
        
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    avg_time = np.mean([r.get('training_time', 0) for r in model_results.values()
                                      if isinstance(r, dict)])
                    models.append('Classical (avg)')
                    times.append(avg_time)
                else:
                    models.append(model_name)
                    times.append(model_results.get('training_time', 0))
        
        bars = ax.bar(models, times, alpha=0.8, color='orange')
        ax.set_xlabel('–ú–æ–¥–µ–ª–∏')
        ax.set_ylabel('–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (—Å)')
        ax.set_title('–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π')
        ax.set_xticklabels(models, rotation=45, ha='right')
        ax.grid(True, alpha=0.3)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –µ—Å–ª–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å
        if max(times) / min([t for t in times if t > 0] + [1]) > 100:
            ax.set_yscale('log')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        for bar, time_val in zip(bars, times):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{time_val:.1f}s', ha='center', va='bottom')
    
    def _plot_metrics_radar(self, ax, results):
        """Radar chart —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è radar chart
        categories = ['Accuracy', 'Speed', 'Complexity']
        
        models_data = {}
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    # –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –º–æ–¥–µ–ª—è–º
                    accuracy = 1 - np.mean([r.get('val_metrics', {}).get('mae', 1) 
                                          for r in model_results.values() if isinstance(r, dict)])
                    speed = 1.0  # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –±—ã—Å—Ç—Ä—ã–µ
                    complexity = 0.3  # –ü—Ä–æ—Å—Ç—ã–µ
                else:
                    accuracy = 1 - model_results.get('val_metrics', {}).get('final_val_loss', 1)
                    speed = 0.5  # SOTA –º–æ–¥–µ–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ
                    complexity = 0.8  # –°–ª–æ–∂–Ω—ã–µ
                
                models_data[model_name] = [max(0, accuracy), speed, complexity]
        
        # –£–≥–ª—ã –¥–ª—è radar chart
        angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
        angles += angles[:1]  # –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
        
        colors = ['blue', 'red', 'green', 'orange', 'purple']
        
        for i, (model_name, values) in enumerate(models_data.items()):
            values += values[:1]  # –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
            ax.plot(angles, values, 'o-', linewidth=2, label=model_name, 
                   color=colors[i % len(colors)])
            ax.fill(angles, values, alpha=0.25, color=colors[i % len(colors)])
        
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(categories)
        ax.set_ylim(0, 1)
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–æ–¥–µ–ª–µ–π', y=1.08)
        ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))
        ax.grid(True)
    
    def _plot_classical_detailed(self, ax, results):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        if 'classical' not in results:
            ax.text(0.5, 0.5, '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–∞–ª–∏—Å—å', 
                   ha='center', va='center', transform=ax.transAxes)
            ax.set_title('–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π')
            return
        
        classical_results = results['classical']
        models = []
        mae_vals = []
        r2_vals = []
        
        for model_name, model_result in classical_results.items():
            if isinstance(model_result, dict) and 'val_metrics' in model_result:
                models.append(model_name)
                mae_vals.append(model_result['val_metrics'].get('mae', 0))
                r2_vals.append(model_result['val_metrics'].get('r2', 0))
        
        x = np.arange(len(models))
        
        # –î–≤–æ–π–Ω–∞—è –æ—Å—å Y
        ax2 = ax.twinx()
        
        bars1 = ax.bar(x - 0.2, mae_vals, 0.4, label='MAE', alpha=0.8, color='blue')
        bars2 = ax2.bar(x + 0.2, r2_vals, 0.4, label='R¬≤', alpha=0.8, color='red')
        
        ax.set_xlabel('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏')
        ax.set_ylabel('MAE', color='blue')
        ax2.set_ylabel('R¬≤', color='red')
        ax.set_title('–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π')
        ax.set_xticks(x)
        ax.set_xticklabels(models, rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, val in zip(bars1, mae_vals):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{val:.3f}', ha='center', va='bottom', color='blue')
        
        for bar, val in zip(bars2, r2_vals):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height,
                    f'{val:.3f}', ha='center', va='bottom', color='red')
        
        ax.grid(True, alpha=0.3)
    
    def _plot_summary_table(self, ax, results):
        """–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        ax.axis('tight')
        ax.axis('off')
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        headers = ['–ú–æ–¥–µ–ª—å', 'Val Loss/MAE', '–í—Ä–µ–º—è (—Å)', '–¢–∏–ø']
        
        for model_name, model_results in results.items():
            if isinstance(model_results, dict) and 'error' not in model_results:
                if model_name == 'classical':
                    # –õ—É—á—à–∞—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å
                    best_classical = min(model_results.items(), 
                                        key=lambda x: x[1].get('val_metrics', {}).get('mae', float('inf')))
                    table_data.append([
                        f"{best_classical[0]} (best)",
                        f"{best_classical[1].get('val_metrics', {}).get('mae', 0):.4f}",
                        f"{best_classical[1].get('training_time', 0):.1f}",
                        "Classical"
                    ])
                else:
                    val_loss = model_results.get('val_metrics', {}).get('final_val_loss', 0)
                    training_time = model_results.get('training_time', 0)
                    table_data.append([
                        model_name,
                        f"{val_loss:.4f}",
                        f"{training_time:.1f}",
                        "SOTA"
                    ])
        
        if table_data:
            table = ax.table(cellText=table_data, colLabels=headers,
                           cellLoc='center', loc='center')
            table.auto_set_font_size(False)
            table.set_fontsize(9)
            table.scale(1.2, 1.5)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            for i in range(len(headers)):
                table[(0, i)].set_facecolor('#40466e')
                table[(0, i)].set_text_props(weight='bold', color='white')
            
            for i in range(1, len(table_data) + 1):
                for j in range(len(headers)):
                    if i % 2 == 0:
                        table[(i, j)].set_facecolor('#f1f1f2')
        
        ax.set_title('–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', pad=20)
    
    def plot_training_curves(self, log_dir: Path):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
        training_viz = TrainingVisualizer(self.save_dir)
        training_viz.plot_training_curves(log_dir)

def create_comprehensive_report(dataset_path: str, results: Dict, output_dir: Path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        # 1. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
        if Path(dataset_path).exists():
            dataset = xr.open_zarr(dataset_path)
            dataset_viz = DatasetVisualizer(dataset, output_dir)
            dataset_viz.plot_dataset_overview()
        
        # 2. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_viz = ResultsVisualizer(output_dir)
        results_viz.plot_model_comparison(results)
        
        # 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        training_viz = TrainingVisualizer(output_dir)
        if (output_dir.parent / 'lightning_logs').exists():
            training_viz.plot_training_curves(output_dir.parent / 'lightning_logs')
        
        print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: {output_dir}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def save_predictions_visualization(predictions: np.ndarray, 
                                 targets: np.ndarray,
                                 save_path: Path,
                                 model_name: str = "Model"):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π vs —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    # Scatter plot
    axes[0].scatter(targets.flatten(), predictions.flatten(), alpha=0.5)
    axes[0].plot([targets.min(), targets.max()], [targets.min(), targets.max()], 'r--')
    axes[0].set_xlabel('–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    axes[0].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    axes[0].set_title(f'{model_name}: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs –†–µ–∞–ª—å–Ω—ã–µ')
    axes[0].grid(True, alpha=0.3)
    
    # Histogram of errors
    errors = predictions.flatten() - targets.flatten()
    axes[1].hist(errors, bins=50, alpha=0.7, edgecolor='black')
    axes[1].axvline(np.mean(errors), color='red', linestyle='--', label=f'Mean: {np.mean(errors):.3f}')
    axes[1].set_xlabel('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    axes[1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫')
    axes[1].legend()
    axes[1].grid(True, alpha=0.3)
    
    # Time series example
    if len(predictions.shape) > 1:
        sample_idx = np.random.randint(0, predictions.shape[0])
        axes[2].plot(targets[sample_idx], label='–†–µ–∞–ª—å–Ω—ã–µ', linewidth=2)
        axes[2].plot(predictions[sample_idx], label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è', linewidth=2, alpha=0.8)
        axes[2].set_xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥')
        axes[2].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
        axes[2].set_title('–ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞')
        axes[2].legend()
        axes[2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig(save_path / f'{model_name.lower()}_predictions.png', dpi=300, bbox_inches='tight')
    plt.close()

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üé® –£—Ç–∏–ª–∏—Ç—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –≤ –≤–∞—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è")