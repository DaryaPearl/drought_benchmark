#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python configs/config_manager.py list                    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    python configs/config_manager.py validate quick_test     # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    python configs/config_manager.py create my_config        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    python configs/config_manager.py merge base quick_test   # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    python configs/config_manager.py compare config1 config2 # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
"""

import argparse
import yaml
import json
from pathlib import Path
from typing import Dict, List, Any, Optional
import sys
from datetime import datetime

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, configs_dir: str = "configs"):
        self.configs_dir = Path(configs_dir)
        self.configs_dir.mkdir(exist_ok=True)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.available_configs = {
            'config.yaml': '–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
            'quick_test.yaml': '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã (5-10 –º–∏–Ω—É—Ç)',
            'earthformer.yaml': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è EarthFormer',
            'classical_only.yaml': '–¢–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ ML –º–æ–¥–µ–ª–∏',
            'research.yaml': '–ü–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º',
            'production.yaml': '–ü—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            'gpu_optimized.yaml': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è GPU',
            'multi_gpu.yaml': '–ú—É–ª—å—Ç–∏-GPU –æ–±—É—á–µ–Ω–∏–µ',
            'cpu_only.yaml': 'CPU-only –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'
        }
    
    def list_configs(self) -> None:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("=" * 50)
        
        for config_name, description in self.available_configs.items():
            config_path = self.configs_dir / config_name
            status = "‚úÖ" if config_path.exists() else "‚ùå"
            print(f"{status} {config_name:<20} - {description}")
        
        print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é:")
        print("   python configs/config_manager.py create <config_name>")
    
    def load_config(self, config_name: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = self.configs_dir / f"{config_name}.yaml"
        if not config_path.exists():
            config_path = self.configs_dir / config_name
            if not config_path.exists():
                raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_name}")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def save_config(self, config: Dict[str, Any], config_name: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = self.configs_dir / f"{config_name}.yaml"
        
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, 
                     allow_unicode=True, indent=2)
        
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")
    
    def validate_config(self, config_name: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_name}")
        
        try:
            config = self.load_config(config_name)
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            errors = []
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            required_sections = ['project', 'data', 'training', 'models']
            for section in required_sections:
                if section not in config:
                    errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            if 'project' in config:
                if 'name' not in config['project']:
                    errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç project.name")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'data' in config:
                data_config = config['data']
                
                if 'years_range' in data_config:
                    years = data_config['years_range']
                    if len(years) != 2 or years[0] >= years[1]:
                        errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π years_range")
                
                if 'target_variable' not in data_config:
                    warnings.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ target_variable")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            if 'training' in config:
                train_config = config['training']
                
                if 'batch_size' in train_config and train_config['batch_size'] <= 0:
                    errors.append("batch_size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                
                if 'max_epochs' in train_config and train_config['max_epochs'] <= 0:
                    errors.append("max_epochs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                
                if 'learning_rate' in train_config:
                    lr = train_config['learning_rate']
                    if lr <= 0 or lr > 1:
                        warnings.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π learning_rate: {lr}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
            if 'models' in config:
                models_config = config['models']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞
                any_enabled = False
                
                if 'classical' in models_config:
                    for model_name, model_config in models_config['classical'].items():
                        if isinstance(model_config, dict) and model_config.get('enabled', False):
                            any_enabled = True
                
                if 'sota' in models_config:
                    for model_name, model_config in models_config['sota'].items():
                        if isinstance(model_config, dict) and model_config.get('enabled', False):
                            any_enabled = True
                
                if not any_enabled:
                    errors.append("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ compute
            if 'compute' in config:
                compute_config = config['compute']
                
                if 'accelerator' in compute_config:
                    accelerator = compute_config['accelerator']
                    if accelerator not in ['auto', 'cpu', 'gpu', 'tpu']:
                        warnings.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π accelerator: {accelerator}")
                
                if 'precision' in compute_config:
                    precision = compute_config['precision']
                    if precision not in [16, 32, 64]:
                        warnings.append(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è precision: {precision}")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if errors:
                print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
                for error in errors:
                    print(f"  ‚Ä¢ {error}")
            
            if warnings:
                print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for warning in warnings:
                    print(f"  ‚Ä¢ {warning}")
            
            if not errors and not warnings:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
            elif not errors:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)")
            
            return len(errors) == 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def create_config(self, config_name: str, template: str = "config") -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            base_config = self.load_config(template)
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if 'project' in base_config:
                base_config['project']['name'] = config_name
                base_config['project']['created'] = datetime.now().isoformat()
                base_config['project']['based_on'] = template
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.save_config(base_config, config_name)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ {template}")
            print(f"üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: {self.configs_dir / f'{config_name}.yaml'}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def merge_configs(self, base_config: str, overlay_config: str, 
                     output_name: str) -> None:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        print(f"üîÄ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {base_config} + {overlay_config} ‚Üí {output_name}")
        
        try:
            base = self.load_config(base_config)
            overlay = self.load_config(overlay_config)
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            merged = self._deep_merge(base, overlay)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if 'project' not in merged:
                merged['project'] = {}
            
            merged['project']['name'] = output_name
            merged['project']['merged_from'] = [base_config, overlay_config]
            merged['project']['created'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.save_config(merged, output_name)
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def _deep_merge(self, base: Dict, overlay: Dict) -> Dict:
        """–ì–ª—É–±–æ–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π"""
        result = base.copy()
        
        for key, value in overlay.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._deep_merge(result[key], value)
            else:
                result[key] = value
        
        return result
    
    def compare_configs(self, config1: str, config2: str) -> None:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {config1} ‚Üî {config2}")
        print("=" * 50)
        
        try:
            cfg1 = self.load_config(config1)
            cfg2 = self.load_config(config2)
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
            differences = self._find_differences(cfg1, cfg2, "")
            
            if not differences:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
                return
            
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–ª–∏—á–∏–π: {len(differences)}")
            print()
            
            for diff in differences:
                print(f"üìç {diff['path']}")
                print(f"  {config1}: {diff['value1']}")
                print(f"  {config2}: {diff['value2']}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def _find_differences(self, dict1: Any, dict2: Any, path: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
        differences = []
        
        if type(dict1) != type(dict2):
            differences.append({
                'path': path,
                'value1': f"{type(dict1).__name__}: {dict1}",
                'value2': f"{type(dict2).__name__}: {dict2}"
            })
            return differences
        
        if isinstance(dict1, dict):
            all_keys = set(dict1.keys()) | set(dict2.keys())
            
            for key in all_keys:
                new_path = f"{path}.{key}" if path else key
                
                if key not in dict1:
                    differences.append({
                        'path': new_path,
                        'value1': '<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>',
                        'value2': dict2[key]
                    })
                elif key not in dict2:
                    differences.append({
                        'path': new_path,
                        'value1': dict1[key],
                        'value2': '<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>'
                    })
                else:
                    differences.extend(
                        self._find_differences(dict1[key], dict2[key], new_path)
                    )
        
        elif isinstance(dict1, list):
            if len(dict1) != len(dict2):
                differences.append({
                    'path': f"{path}[length]",
                    'value1': len(dict1),
                    'value2': len(dict2)
                })
            
            for i in range(min(len(dict1), len(dict2))):
                differences.extend(
                    self._find_differences(dict1[i], dict2[i], f"{path}[{i}]")
                )
        
        elif dict1 != dict2:
            differences.append({
                'path': path,
                'value1': dict1,
                'value2': dict2
            })
        
        return differences
    
    def optimize_config(self, config_name: str, target: str = "balanced") -> None:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏"""
        print(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {config_name} –¥–ª—è {target}")
        
        try:
            config = self.load_config(config_name)
            
            if target == "speed":
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                if 'training' in config:
                    config['training']['batch_size'] = min(config['training'].get('batch_size', 32) * 2, 128)
                    config['training']['max_epochs'] = min(config['training'].get('max_epochs', 100), 50)
                    config['training']['num_workers'] = 8
                
                if 'models' in config and 'sota' in config['models']:
                    # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—è–∂–µ–ª—ã–µ –º–æ–¥–µ–ª–∏
                    if 'earthformer' in config['models']['sota']:
                        config['models']['sota']['earthformer']['enabled'] = False
                    if 'tft' in config['models']['sota']:
                        config['models']['sota']['tft']['enabled'] = False
                
                if 'compute' in config:
                    config['compute']['precision'] = 16
                    config['compute']['compile_models'] = True
            
            elif target == "quality":
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                if 'training' in config:
                    config['training']['max_epochs'] = max(config['training'].get('max_epochs', 100), 200)
                    config['training']['early_stopping_patience'] = 30
                
                if 'evaluation' in config:
                    config['evaluation']['cross_validation']['enabled'] = True
                    config['evaluation']['cross_validation']['n_splits'] = 10
            
            elif target == "memory":
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–∞–º—è—Ç–∏
                if 'training' in config:
                    config['training']['batch_size'] = max(config['training'].get('batch_size', 32) // 2, 4)
                    config['training']['accumulate_grad_batches'] = 4
                
                if 'compute' in config:
                    config['compute']['precision'] = 16
                    config['compute']['max_memory_usage'] = 0.7
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            optimized_name = f"{config_name}_{target}_optimized"
            self.save_config(config, optimized_name)
            
            print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {optimized_name}.yaml")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    parser = argparse.ArgumentParser(
        description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞—Å—É—Ö–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python config_manager.py list
  python config_manager.py validate quick_test
  python config_manager.py create my_experiment --template research
  python config_manager.py merge config quick_test my_quick_config
  python config_manager.py compare earthformer research
  python config_manager.py optimize config --target speed
        """
    )
    
    parser.add_argument('command', choices=[
        'list', 'validate', 'create', 'merge', 'compare', 'optimize'
    ], help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    parser.add_argument('args', nargs='*', help='–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã')
    parser.add_argument('--template', default='config', help='–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è')
    parser.add_argument('--target', choices=['speed', 'quality', 'memory'], 
                       default='balanced', help='–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--configs-dir', default='configs', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π')
    
    args = parser.parse_args()
    
    manager = ConfigManager(args.configs_dir)
    
    try:
        if args.command == 'list':
            manager.list_configs()
        
        elif args.command == 'validate':
            if not args.args:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                return 1
            manager.validate_config(args.args[0])
        
        elif args.command == 'create':
            if not args.args:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return 1
            manager.create_config(args.args[0], args.template)
        
        elif args.command == 'merge':
            if len(args.args) < 3:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ: base_config overlay_config output_name")
                return 1
            manager.merge_configs(args.args[0], args.args[1], args.args[2])
        
        elif args.command == 'compare':
            if len(args.args) < 2:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return 1
            manager.compare_configs(args.args[0], args.args[1])
        
        elif args.command == 'optimize':
            if not args.args:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return 1
            manager.optimize_config(args.args[0], args.target)
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())