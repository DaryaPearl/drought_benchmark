"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ NaN
–ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ src/data_pipeline/quick_data_pipeline.py
"""

import numpy as np
import pandas as pd
import xarray as xr
from pathlib import Path
import warnings
warnings.filterwarnings("ignore")

def create_clean_synthetic_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ NaN"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    time_range = pd.date_range('2020-01', '2022-12', freq='ME')
    
    # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ (–Ω–µ–±–æ–ª—å—à–∞—è –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
    lat_range = np.arange(40.0, 45.0, 1.0)  # 5 —Ç–æ—á–µ–∫
    lon_range = np.arange(-100.0, -95.0, 1.0)  # 5 —Ç–æ—á–µ–∫
    
    print(f"üìê –†–∞–∑–º–µ—Ä—ã: –≤—Ä–µ–º—è={len(time_range)}, —à–∏—Ä–æ—Ç–∞={len(lat_range)}, –¥–æ–ª–≥–æ—Ç–∞={len(lon_range)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    n_time, n_lat, n_lon = len(time_range), len(lat_range), len(lon_range)
    
    # –°–ª—É—á–∞–π–Ω—ã–µ —Å–µ–º–µ–Ω–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    np.random.seed(42)
    
    # 1. –û—Å–∞–¥–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –±–µ–∑ NaN)
    precipitation = np.zeros((n_time, n_lat, n_lon))
    for t, date in enumerate(time_range):
        # –°–µ–∑–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        seasonal = 50 + 30 * np.sin(2 * np.pi * (date.month - 1) / 12)
        # –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        random_component = 20 * np.random.exponential(1, (n_lat, n_lon))
        precipitation[t] = seasonal + random_component
    
    # 2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è, –±–µ–∑ NaN)
    temperature = np.zeros((n_time, n_lat, n_lon))
    for t, date in enumerate(time_range):
        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        seasonal = 15 + 20 * np.sin(2 * np.pi * (date.month - 3) / 12)
        # –®—É–º
        noise = 5 * np.random.randn(n_lat, n_lon)
        temperature[t] = seasonal + noise
    
    # 3. NDVI (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å–∞–¥–∫–æ–≤, –±–µ–∑ NaN)
    ndvi = np.zeros((n_time, n_lat, n_lon))
    for t in range(n_time):
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ—Å–∞–¥–∫–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
        precip_effect = np.tanh(precipitation[t] / 100) * 0.4
        # –ë–∞–∑–æ–≤—ã–π NDVI
        base_ndvi = 0.3
        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        seasonal_ndvi = 0.2 * np.sin(2 * np.pi * (time_range[t].month - 4) / 12)
        ndvi[t] = base_ndvi + precip_effect + seasonal_ndvi + 0.05 * np.random.randn(n_lat, n_lon)
        # –û–±—Ä–µ–∑–∞–µ–º –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        ndvi[t] = np.clip(ndvi[t], 0.1, 0.9)
    
    # 4. –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å–∞–¥–∫–æ–≤, –±–µ–∑ NaN)
    soil_moisture = np.zeros((n_time, n_lat, n_lon))
    for t in range(n_time):
        # –ë–∞–∑–æ–≤–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å + –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ—Å–∞–¥–∫–æ–≤
        base_moisture = 0.3
        precip_effect = precipitation[t] / 500  # –í–ª–∏—è–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤
        soil_moisture[t] = base_moisture + precip_effect + 0.1 * np.random.randn(n_lat, n_lon)
        # –û–±—Ä–µ–∑–∞–µ–º –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        soil_moisture[t] = np.clip(soil_moisture[t], 0.1, 0.8)
    
    # 5. –†–∞—Å—á–µ—Ç SPI-3 (–ø—Ä–æ—Å—Ç–æ–π, –±–µ–∑ NaN)
    spi3 = calculate_robust_spi(precipitation, window=3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
    for var_name, var_data in [
        ('precipitation', precipitation),
        ('temperature', temperature), 
        ('ndvi', ndvi),
        ('soil_moisture', soil_moisture),
        ('spi3', spi3)
    ]:
        nan_count = np.isnan(var_data).sum()
        if nan_count > 0:
            print(f"‚ö† {var_name} —Å–æ–¥–µ—Ä–∂–∏—Ç {nan_count} NaN –∑–Ω–∞—á–µ–Ω–∏–π - –∑–∞–º–µ–Ω—è–µ–º")
            # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            var_data[np.isnan(var_data)] = np.nanmean(var_data)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ xarray Dataset
    dataset = xr.Dataset({
        'precipitation': (['time', 'latitude', 'longitude'], precipitation),
        'temperature': (['time', 'latitude', 'longitude'], temperature),
        'ndvi': (['time', 'latitude', 'longitude'], ndvi),
        'soil_moisture': (['time', 'latitude', 'longitude'], soil_moisture),
        'spi3': (['time', 'latitude', 'longitude'], spi3),
    }, coords={
        'time': time_range,
        'latitude': lat_range,
        'longitude': lon_range,
    })
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
    for var in dataset.data_vars:
        nan_count = np.isnan(dataset[var].values).sum()
        if nan_count > 0:
            print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {nan_count} NaN –≤ {var}")
            dataset[var] = dataset[var].fillna(dataset[var].mean())
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    dataset.attrs.update({
        'title': 'Clean Synthetic Drought Dataset',
        'description': 'Clean artificially generated data without NaN values',
        'created': pd.Timestamp.now().isoformat(),
        'spatial_resolution': '1.0 degrees',
        'temporal_resolution': 'monthly',
        'variables': list(dataset.data_vars.keys()),
        'quality': 'no_nan_values'
    })
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ NaN")
    return dataset

def calculate_robust_spi(precipitation, window=3):
    """–ù–∞–¥–µ–∂–Ω—ã–π —Ä–∞—Å—á–µ—Ç SPI –±–µ–∑ NaN"""
    print(f"üßÆ –†–∞—Å—á–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ SPI-{window}...")
    
    T, H, W = precipitation.shape
    spi = np.zeros((T, H, W))  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª—è–º–∏ –≤–º–µ—Å—Ç–æ NaN
    
    # –°–∫–æ–ª—å–∑—è—â–∞—è —Å—É–º–º–∞
    for t in range(window, T):
        rolling_precip = np.sum(precipitation[t-window:t], axis=0)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
        for i in range(H):
            for j in range(W):
                # –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
                pixel_history = []
                for hist_t in range(window, t+1):
                    pixel_precip = np.sum(precipitation[hist_t-window:hist_t, i, j])
                    pixel_history.append(pixel_precip)
                
                if len(pixel_history) > 0:
                    mean_precip = np.mean(pixel_history)
                    std_precip = np.std(pixel_history)
                    
                    if std_precip > 0:
                        spi[t, i, j] = (rolling_precip[i, j] - mean_precip) / std_precip
                    else:
                        spi[t, i, j] = 0.0
                else:
                    spi[t, i, j] = 0.0
    
    # –û–±—Ä–µ–∑–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    spi = np.clip(spi, -3, 3)
    
    return spi

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ NaN")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    data_dir = Path("data")
    processed_dir = data_dir / "processed"
    processed_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    dataset = create_clean_synthetic_data()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    print("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:")
    total_nan = 0
    for var in dataset.data_vars:
        data = dataset[var].values
        nan_count = np.isnan(data).sum()
        total_nan += nan_count
        print(f"  {var}: {nan_count} NaN –∑–Ω–∞—á–µ–Ω–∏–π")
        print(f"    –î–∏–∞–ø–∞–∑–æ–Ω: [{data.min():.3f}, {data.max():.3f}]")
        print(f"    –°—Ä–µ–¥–Ω–µ–µ: {data.mean():.3f}")
    
    if total_nan > 0:
        raise ValueError(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_nan} NaN –∑–Ω–∞—á–µ–Ω–∏–π!")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    output_path = processed_dir / "real_agro_cube.zarr"
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ {output_path}...")
    
    dataset.to_zarr(output_path, mode='w')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(f"  üìê –†–∞–∑–º–µ—Ä—ã: {dict(dataset.dims)}")
    print(f"  üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(dataset.data_vars.keys())}")
    print(f"  üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {dataset.time.min().values} - {dataset.time.max().values}")
    print(f"  üó∫ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ö–≤–∞—Ç: {dataset.latitude.min().values:.1f}-{dataset.latitude.max().values:.1f}¬∞N, {dataset.longitude.min().values:.1f}-{dataset.longitude.max().values:.1f}¬∞E")
    print(f"  ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: 0 NaN –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:")
    print(f"  –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è sequence_length=12: {len(dataset.time) >= 12}")
    print(f"  –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(dataset.time) >= 20}")
    
    print(f"\n‚úÖ –ù–∞–¥–µ–∂–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    print(f"üìÅ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {output_path}")
    print(f"üí° –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    
    return dataset

if __name__ == "__main__":
    main()