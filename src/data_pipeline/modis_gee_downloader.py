"""
–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ src/data_pipeline/real_data_pipeline.py –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö MODIS –¥–∞–Ω–Ω—ã—Ö
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫: src/data_pipeline/modis_gee_downloader.py
"""

import ee
import xarray as xr
import numpy as np
import pandas as pd
from pathlib import Path
import geemap
import warnings
warnings.filterwarnings("ignore")

class MODISGEEDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö MODIS –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google Earth Engine"""
    
    def __init__(self, project_id=None):
        """
        project_id: Google Cloud Project ID
        –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ https://console.cloud.google.com/
        """
        self.project_id = project_id
        self._initialize_ee()
    
    def _initialize_ee(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Earth Engine"""
        try:
            if self.project_id:
                ee.Initialize(project=self.project_id)
            else:
                ee.Initialize()
            print("‚úÖ Google Earth Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Earth Engine: {e}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: earthengine authenticate")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: https://console.cloud.google.com/")
            raise
    
    def download_modis_ndvi_real(self, chirps_file='data/raw/chirps_spi.nc', 
                                output_file='data/raw/modis_ndvi_real.nc'):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö MODIS NDVI –¥–∞–Ω–Ω—ã—Ö"""
        
        print("üõ∞Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö MODIS NDVI –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google Earth Engine...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º CHIRPS –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        chirps = xr.open_dataset(chirps_file)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞
        lon_min, lon_max = float(chirps.longitude.min()), float(chirps.longitude.max())
        lat_min, lat_max = float(chirps.latitude.min()), float(chirps.latitude.max())
        
        print(f"üìç –û–±–ª–∞—Å—Ç—å: {lat_min:.1f}-{lat_max:.1f}¬∞N, {lon_min:.1f}-{lon_max:.1f}¬∞E")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–±–ª–∞—Å—Ç–∏
        roi = ee.Geometry.Rectangle([lon_min, lat_min, lon_max, lat_max])
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        start_date = chirps.time.min().values
        end_date = chirps.time.max().values
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {pd.Timestamp(start_date).strftime('%Y-%m')} - {pd.Timestamp(end_date).strftime('%Y-%m')}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º MODIS NDVI (MOD13A2 - 16-–¥–Ω–µ–≤–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ç—ã 1–∫–º)
        modis = ee.ImageCollection('MODIS/061/MOD13A2') \
            .filterDate(pd.Timestamp(start_date).strftime('%Y-%m-%d'), 
                       pd.Timestamp(end_date).strftime('%Y-%m-%d')) \
            .filterBounds(roi) \
            .select(['NDVI', 'EVI'])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {modis.size().getInfo()} MODIS –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MODIS –¥–∞–Ω–Ω—ã—Ö
        def process_modis(image):
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (MODIS NDVI –∏–º–µ–µ—Ç scale factor 0.0001)
            ndvi = image.select('NDVI').multiply(0.0001)
            evi = image.select('EVI').multiply(0.0001)
            
            # –û–±—Ä–µ–∑–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏
            ndvi = ndvi.clip(roi)
            evi = evi.clip(roi)
            
            return ee.Image.cat([ndvi.rename('ndvi'), evi.rename('evi')]) \
                .copyProperties(image, ['system:time_start'])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        modis_processed = modis.map(process_modis)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ç—ã
        def create_monthly_composite(year, month):
            start = ee.Date.fromYMD(year, month, 1)
            end = start.advance(1, 'month')
            
            monthly = modis_processed.filterDate(start, end)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç
            return ee.Algorithms.If(
                monthly.size().gt(0),
                monthly.median().set({
                    'year': year,
                    'month': month,
                    'system:time_start': start.millis()
                }),
                None
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
        time_range = pd.date_range(
            pd.Timestamp(start_date).strftime('%Y-%m'),
            pd.Timestamp(end_date).strftime('%Y-%m'),
            freq='MS'
        )
        
        monthly_images = []
        for date in time_range:
            composite = create_monthly_composite(date.year, date.month)
            monthly_images.append(composite)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        monthly_collection = ee.ImageCollection(
            ee.List(monthly_images).filter(ee.Filter.neq('item', None))
        )
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {monthly_collection.size().getInfo()} –º–µ—Å—è—á–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ç–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        print("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Earth Engine...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ CHIRPS (0.25 –≥—Ä–∞–¥—É—Å–∞ = ~27.5 –∫–º)
        scale = 0.25 * 111320  # –º–µ—Ç—Ä—ã
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—É—é —Å–µ—Ç–∫—É –∫–∞–∫ –≤ CHIRPS
        lat_coords = chirps.latitude.values
        lon_coords = chirps.longitude.values
        time_coords = time_range
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
        ndvi_data = np.full((len(time_coords), len(lat_coords), len(lon_coords)), np.nan)
        evi_data = np.full((len(time_coords), len(lat_coords), len(lon_coords)), np.nan)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ GEE)
        monthly_list = monthly_collection.toList(monthly_collection.size())
        
        for i in range(len(time_coords)):
            try:
                print(f"  üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ {time_coords[i].strftime('%Y-%m')} ({i+1}/{len(time_coords)})")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—è—Ü–∞
                image = ee.Image(monthly_list.get(i))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
                try:
                    image_info = image.getInfo()
                    if not image_info:
                        print(f"    ‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {time_coords[i].strftime('%Y-%m')}")
                        continue
                except:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è {time_coords[i].strftime('%Y-%m')}")
                    continue
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ numpy array
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º geemap –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    ndvi_array = geemap.ee_to_numpy(
                        image.select('ndvi'),
                        region=roi,
                        scale=scale,
                        bands=['ndvi']
                    )
                    
                    evi_array = geemap.ee_to_numpy(
                        image.select('evi'),
                        region=roi,
                        scale=scale,
                        bands=['evi']
                    )
                    
                    if ndvi_array is not None and evi_array is not None:
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if ndvi_array.shape != (len(lat_coords), len(lon_coords)):
                            from scipy.ndimage import zoom
                            zoom_factors = (len(lat_coords) / ndvi_array.shape[0], 
                                          len(lon_coords) / ndvi_array.shape[1])
                            ndvi_array = zoom(ndvi_array, zoom_factors, order=1)
                            evi_array = zoom(evi_array, zoom_factors, order=1)
                        
                        ndvi_data[i] = ndvi_array
                        evi_data[i] = evi_array
                        print(f"    ‚úÖ {time_coords[i].strftime('%Y-%m')} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è {time_coords[i].strftime('%Y-%m')}: {e}")
                    continue
                    
            except Exception as e:
                print(f"    ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {time_coords[i].strftime('%Y-%m')}: {e}")
                continue
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
        valid_ndvi = ~np.isnan(ndvi_data).all(axis=(1,2))
        success_rate = valid_ndvi.sum() / len(time_coords) * 100
        
        print(f"üìä –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {valid_ndvi.sum()}/{len(time_coords)} –º–µ—Å—è—Ü–µ–≤ ({success_rate:.1f}%)")
        
        # –°–æ–∑–¥–∞–µ–º xarray Dataset
        modis_ds = xr.Dataset({
            'ndvi': (['time', 'latitude', 'longitude'], ndvi_data),
            'evi': (['time', 'latitude', 'longitude'], evi_data),
        }, coords={
            'time': time_coords,
            'latitude': lat_coords,
            'longitude': lon_coords,
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        modis_ds.attrs.update({
            'title': 'Real MODIS NDVI/EVI Data from Google Earth Engine',
            'source': 'MODIS/061/MOD13A2',
            'description': 'Monthly composites of MODIS NDVI and EVI',
            'spatial_resolution': '1km (resampled to CHIRPS grid)',
            'temporal_resolution': 'monthly',
            'download_method': 'Google Earth Engine',
            'success_rate': f'{success_rate:.1f}%'
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        Path(output_file).parent.mkdir(parents=True, exist_ok=True)
        modis_ds.to_netcdf(output_file)
        
        file_size = Path(output_file).stat().st_size / 1024 / 1024
        print(f"\n‚úÖ –†–µ–∞–ª—å–Ω—ã–µ MODIS –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  üìÅ –§–∞–π–ª: {output_file}")
        print(f"  üíΩ –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        print(f"  üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: NDVI, EVI")
        print(f"  üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        return modis_ds

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ MODIS –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Google Cloud Project ID
    PROJECT_ID = "abstract-maker-450111-n5"  # –ù–∞–ø—Ä–∏–º–µ—Ä: "drought-prediction-12345"
    
    try:
        downloader = MODISGEEDownloader(project_id=PROJECT_ID)
        modis_data = downloader.download_modis_ndvi_real()
        
        print("\nüéâ –†–µ–∞–ª—å–Ω—ã–µ MODIS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π pipeline —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –®–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Earth Engine:")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: https://earthengine.google.com/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: https://console.cloud.google.com/")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: earthengine authenticate")
        print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install earthengine-api geemap")

if __name__ == "__main__":
    main()