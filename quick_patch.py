#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ MODIS pixel_reliability
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_patch.py
"""

import os
import re
from pathlib import Path

def patch_modis_code():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É pixel_reliability –≤ –∫–æ–¥–µ MODIS"""
    print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è MODIS –æ—à–∏–±–∫–∏...")
    
    # –ù–∞–π–¥–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
    possible_files = [
        "src/data_pipeline/prepare_extended_cube.py",
        "src/data_pipeline/real_data_pipeline.py", 
        "src/data_pipeline/modis_gee_downloader.py"
    ]
    
    patched_files = []
    
    for file_path in possible_files:
        if Path(file_path).exists():
            print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_path}")
            
            try:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                if 'pixel_reliability' in content:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ {file_path}")
                    
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    original_content = content
                    
                    # 1. –£–±–∏—Ä–∞–µ–º pixel_reliability –∏–∑ select
                    content = re.sub(
                        r"\.select\(\[([^\]]*)'pixel_reliability'([^\]]*)\]\)",
                        r".select([\1\2])",
                        content
                    )
                    
                    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å pixel_reliability
                    content = content.replace(
                        "select(['NDVI', 'EVI', 'pixel_reliability'])",
                        "select(['NDVI', 'EVI'])"
                    )
                    
                    content = content.replace(
                        "'pixel_reliability'",
                        "'DetailedQA'"
                    )
                    
                    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if "def scale_ndvi(img):" in content or "def process_modis(img):" in content:
                        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É pixel_reliability –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –º–∞—Å–∫—É
                        pattern = r"(pixel_reliability[^\n]*\n[^\n]*\n[^\n]*\n)"
                        replacement = """# Simple quality mask instead of pixel_reliability
                        mask = ndvi.gte(0).and(ndvi.lte(1))
                        """
                        content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
                    
                    # 4. –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if content != original_content:
                        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                        backup_path = f"{file_path}.backup"
                        with open(backup_path, 'w', encoding='utf-8') as f:
                            f.write(original_content)
                        print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        
                        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                        patched_files.append(file_path)
                    
                else:
                    print(f"‚úÖ {file_path} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
    
    if patched_files:
        print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(patched_files)}")
        for file in patched_files:
            print(f"  ‚úÖ {file}")
    else:
        print("\n‚ö†Ô∏è –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–æ–π pixel_reliability –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return len(patched_files) > 0

def patch_region_bounds_error():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É REGION_BOUNDS"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ REGION_BOUNDS...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ REGION_BOUNDS –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–æ–≤
    region_bounds_code = '''
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ REGION_BOUNDS
REGION_BOUNDS = {
    "us_plains": {"lat_min": 35, "lat_max": 48, "lon_min": -104, "lon_max": -90},
    "br_cerrado": {"lat_min": -20, "lat_max": -6, "lon_min": -62, "lon_max": -46},
    "in_ganga": {"lat_min": 21, "lat_max": 31, "lon_min": 73, "lon_max": 90},
    "ru_steppe": {"lat_min": 50, "lat_max": 55, "lon_min": 37, "lon_max": 47},
}
'''
    
    files_to_check = [
        "src/data_pipeline/prepare_extended_cube.py",
        "src/data_pipeline/real_data_pipeline.py"
    ]
    
    for file_path in files_to_check:
        if Path(file_path).exists():
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'REGION_BOUNDS' in content and 'name \'REGION_BOUNDS\' is not defined' not in content:
                continue  # –£–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            lines = content.split('\n')
            insert_position = 0
            
            # –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
            for i, line in enumerate(lines):
                if line.startswith('import ') or line.startswith('from '):
                    insert_position = i + 1
                elif line.strip() == '' and insert_position > 0:
                    continue
                elif not line.startswith('#') and line.strip() != '' and insert_position > 0:
                    break
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            lines.insert(insert_position, region_bounds_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(lines))
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ REGION_BOUNDS –≤ {file_path}")

def stop_current_process():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    import subprocess
    import signal
    
    try:
        # –ù–∞–π–¥–µ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å data_pipeline
        result = subprocess.run(['pgrep', '-f', 'data_pipeline'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid:
                    try:
                        os.kill(int(pid), signal.SIGTERM)
                        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å PID: {pid}")
                    except:
                        pass
        
        # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å run_project.py
        result = subprocess.run(['pgrep', '-f', 'run_project'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            for pid in pids:
                if pid:
                    try:
                        os.kill(int(pid), signal.SIGTERM)
                        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å PID: {pid}")
                    except:
                        pass
                        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ç—á–∞"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ MODIS")
    print("=" * 60)
    
    # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    stop_current_process()
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pixel_reliability –æ—à–∏–±–∫—É
    patch_modis_code()
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º REGION_BOUNDS –æ—à–∏–±–∫—É
    patch_region_bounds_error()
    
    print("\n" + "=" * 60)
    print("üéâ –ü–ê–¢–ß –ü–†–ò–ú–ï–ù–ï–ù!")
    print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö:")
    print("   python run_project.py --data-only")
    print("   –∏–ª–∏")
    print("   python run_project.py --quick")
    print("\n‚úÖ –û—à–∏–±–∫–∏ pixel_reliability –∏ REGION_BOUNDS –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()